# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
#  workflow_dispatch:
#    branches: [ "master" ]

jobs:
  build:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    strategy:
      matrix:
        node-version: [18.20.2]

    steps:
#    - name: Check out the repo
#      uses: actions/checkout@v4
#
#    - name: Log in to Docker Hub
#      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
#      with:
#        username: ${{ secrets.DOCKER_USERNAME }}
#        password: ${{ secrets.DOCKER_PASSWORD }}
#
#    - name: Extract metadata (tags, labels) for Docker
#      id: meta
#      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#      with:
#        images: ernestsheremet/personal-site
#
#    - name: Build and push Docker image
#      id: push
#      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
#      with:
#        context: .
#        file: ./Dockerfile
#        push: true
#        tags: ${{ steps.meta.outputs.tags }}
#        labels: ${{ steps.meta.outputs.labels }}

#    - name: Generate artifact attestation
#      uses: actions/attest-build-provenance@v1
#      with:
#        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
#        subject-digest: ${{ steps.push.outputs.digest }}
#        push-to-registry: true

    - name: start container on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_PASSWORD }}
        script_stop: true
        command_timeout: 30m
        script: |
          docker image ls
          docker stop $(docker ps -a -q)

#    - name: Use Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v3
#      with:
#        node-version: ${{ matrix.node-version }}
#        cache: 'npm'
#    - run: npm ci
#    - run: npm run build
#    - name: FTP deploy
#      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
#      with:
#       server: testernest.ru
#       username: u0545248_github
#       password: ${{ secrets.ftp_password }}
#       local-dir: ".next/"
#       server-dir: "testernest.ru/"

#    - name: send telegram message on deploy
#      uses: appleboy/telegram-action@master
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: |
#          ${{ github.actor }} created commit:
#          Commit message: ${{ github.event.commits[0].message }}
#
#          Repository: ${{ github.repository }}
#
#          See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

#    - name: ssh deploy on my server
#      uses: easingthemes/ssh-deploy@v2.1.4
#      env:
#        SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY_PROD }}
#        REMOTE_HOST: ${{ secrets.DEPLOY_HOST_PROD }}
#        REMOTE_USER: ${{ secrets.DEPLOY_USER_PROD }}
#        REMOTE_PORT: ${{ secrets.DEPLOY_PORT_PROD }}
#        SOURCE: "build/"
        # TARGET: ${{ secrets.DEPLOY_TARGET_PROD }}
